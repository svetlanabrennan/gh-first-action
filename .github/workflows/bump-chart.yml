name: Update Chart Version and Open Pull Request

on:
  workflow_dispatch:

permissions: write-all

env:
  CHART_DIRECTORY: 'charts/test-chart'
  TEST_VERSION: 'v1.5.7'
  DOCKER_IMAGE_TAG: ""
  ORIGINAL_VERSION: ""

jobs:
  find-chart-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Find Chart Version
        run: |
          DOCKER_IMAGE_TAG=$(echo "${TEST_VERSION}" | sed 's/^v//')
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV

      - name: Current appvVersion
        run: |
          ORIGINAL_APP_VERSION=$(yq eval '.appVersion' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "original app version is: $ORIGINAL_APP_VERSION"
          echo "ORIGINAL_APP_VERSION=$ORIGINAL_APP_VERSION" >> $GITHUB_ENV
        id: original_version

      - name: Update appVersion chart
        run: |
          echo "Chart path is: ${{ env.CHART_DIRECTORY }}/Chart.yaml"
          yq e -i '.appVersion="2.3.0"' ${{ env.CHART_DIRECTORY }}/Chart.yaml

      - name: Capture updated appversion
        run: |
          UPDATED_APP_VERSION=$(yq eval '.appVersion' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "updated appVersion: $UPDATED_APP_VERSION"
          echo "UPDATED_APP_VERSION=$UPDATED_APP_VERSION" >> $GITHUB_ENV

      - name: Capture helm chart version
        run: |
          APP_VERSION=$(yq eval '.version' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "version: $APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Run version update reusable workflow
        id: run-reusable
        run: |
          chmod +x ./.github/workflows/version-bump/version-update.yml
          ./.github/workflows/version-bump/version-update.yml
        env:
          currentVersion: $APP_VERSION
          currentAppVersion: $ORIGINAL_APP_VERSION
          updatedAppVersion: $UPDATED_APP_VERSION

      - name: Set new version
        run: |
          echo "new version is: ${{ steps.run-reusable.outputs.newVersion }}"

      # - name: Calculate Version Difference
      #   run: |
      #     echo "Using ORIGINAL_APP_VERSION: $ORIGINAL_APP_VERSION"
      #     echo "Using UPDATED_APP_VERSION: $UPDATED_APP_VERSION"
 
      #     # DIFFERENCE=$(python -c "print($ORIGINAL_APP_VERSION - $UPDATED_APP_VERSION)")
      #     DIFFERENCE=$(node -e "console.log(parseFloat('${ORIGINAL_APP_VERSION}') - parseFloat('${UPDATED_APP_VERSION}'))")
      #     echo "App version difference: $DIFFERENCE"

      # - name: Debug PAT
      #   run: |
      #     echo "PAT: $PAT"

      # - name: Configure Git
      #   run: |
      #     git config user.name "${{ github.actor }}"
      #     git config user.email "${{ github.actor }}@users.noreply.github.com"

      # - name: Commit Changes
      #   run: |
      #     git checkout -b update-chart-version-${{ github.sha }} origin/main
      #     git branch -a
      #     git add ${{ env.CHART_DIRECTORY }}/Chart.yaml
      #     git commit -m "Update version and appVersion"

      # - name: Push Changes
      #   run: git push origin update-chart-version-${{ github.sha }}
      #   env:
      #     PAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # - name: Open pull request
      #   run: gh pr create -B main -H update-chart-version-${{ github.sha }} --title 'Bump appVersion' --body 'Bumping appVersion'
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}