name: Update Chart Version and Open Pull Request

on:
  workflow_dispatch:

permissions: write-all

env:
  CHART_DIRECTORY: 'charts/test-chart'
  TEST_VERSION: "2.3.0"

jobs:
  find-chart-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.set-new-version.outputs.new-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Find Chart Version
        id: set-new-version
        run: |
          DOCKER_IMAGE_TAG=$(echo "${TEST_VERSION}" | sed 's/^v//')
          # echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          # echo "NEW_VERSOIN=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          echo "new-version=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT

  open-pr:
    # name: Update version and appVersion and open pr
    needs: [find-chart-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug version
        id: find-version
        run: |
          echo "TEST_VERSION=${{ needs.find-chart-version.outputs.new-version }}" >> $GITHUB_ENV

      - name: Current appVersion
        run: |
          ORIGINAL_APP_VERSION=$(yq eval '.appVersion' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "original app version is: $ORIGINAL_APP_VERSION"
          echo "ORIGINAL_APP_VERSION=$ORIGINAL_APP_VERSION" >> $GITHUB_ENV
        id: original_version

      - name: Capture helm chart version
        run: |
          APP_VERSION=$(yq eval '.version' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "version: $APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Run version update reusable workflow
        id: run-reusable
        uses: ./.github/actions/version-bump
        with:
          currentVersion: $APP_VERSION
          currentAppVersion: $ORIGINAL_APP_VERSION
          updatedAppVersion: $TEST_VERSION

      - name: Set new version
        run: |
          echo "new version to set is: ${{ steps.run-reusable.outputs.newVersion }}"

      - name: Update version helm chart
        run: |
          yq e -i ".appVersion=\"${TEST_VERSION}\"" "${{ env.CHART_DIRECTORY }}/Chart.yaml"
          yq e -i '.version="${{ steps.run-reusable.outputs.newVersion }}"' ${{ env.CHART_DIRECTORY }}/Chart.yaml
          echo $(yq eval '.appVersion' ${{ env.CHART_DIRECTORY }}/Chart.yaml)

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Commit Changes
        run: |
          git checkout -b update-chart-version-${{ github.sha }} origin/main
          git branch -a
          git add ${{ env.CHART_DIRECTORY }}/Chart.yaml
          git commit -m "Update version and appVersion"

      - name: Push Changes
        run: git push origin update-chart-version-${{ github.sha }}
        env:
          PAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Open pull request
        run: |
          pr_output=$(gh pr create -B main -H update-chart-version-${{ github.sha }} --title 'Bump appVersion' --body 'Bumping appVersion')
          pr_number=$(echo "$pr_output" | grep -oP 'Created pull request #\K\d+')
          echo "Created pull request number: $pr_number"
                
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge pull request
        run: gh pr merge $pr_number --squash --auto --body "Merged by automation"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}